// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Structure.Infrastructure.DataBase;

#nullable disable

namespace Structure.Infrastructure.Migrations
{
    [DbContext(typeof(StructureContext))]
    [Migration("20240512094007_changeEmployeeProperties")]
    partial class changeEmployeeProperties
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyAggregate.LookUp.CompanyStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyStatus", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CEO")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CFO")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CMO")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CommercialRegistrationExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CommercialRegistrationNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("CommercialRegistrationStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Facebook")
                        .HasColumnType("text");

                    b.Property<string>("InstitutionNumber")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Linkedin")
                        .HasColumnType("text");

                    b.Property<string>("LogoPath")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OwnerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<string>("SocialInsuranceSubscriptionNumber")
                        .HasColumnType("text");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Twitter")
                        .HasColumnType("text");

                    b.Property<string>("UnifiedNationalNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Website")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("StatusId");

                    b.ToTable("Companies", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.CompanyEmployeeStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CompanyEmployeeStatus", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.InjuryTypes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("InjuryTypes", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Role", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.TerminationReasons", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("TerminationReasons", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", b =>
                {
                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<string>("ContractDocomentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("EmploymentContractInDays")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EmploymentStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstLogin")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsTerminated")
                        .HasColumnType("boolean");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Performance")
                        .HasColumnType("numeric");

                    b.Property<int>("ProbationaryPeriodInDays")
                        .HasColumnType("integer");

                    b.Property<bool>("ProbationaryPeriodIsActive")
                        .HasColumnType("boolean");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<int>("StatusId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("EmployeeId", "CompanyId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("CompaniesEmployeeInformations", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.EmployeeServiceTermination", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CertificatePath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompaniesEmployeeInformationsCompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompaniesEmployeeInformationsEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EfeectiveDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("ReasonId")
                        .HasColumnType("integer");

                    b.Property<int>("TerminationReasonsId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TerminationReasonsId");

                    b.HasIndex("CompaniesEmployeeInformationsEmployeeId", "CompaniesEmployeeInformationsCompanyId");

                    b.ToTable("EmployeeServiceTermination", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.InjuryAndDeathRegistration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AtatachmentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompaniesEmployeeInformationsCompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompaniesEmployeeInformationsEmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<int>("InjuryTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("InjuryTypesId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("InjuryTypesId");

                    b.HasIndex("CompaniesEmployeeInformationsEmployeeId", "CompaniesEmployeeInformationsCompanyId");

                    b.ToTable("InjuryAndDeathRegistration", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentJobsAggregate.Models.DepartmentsJobs", b =>
                {
                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DerpatmentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("NumberOfPosition")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("JobId", "DerpatmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("DepartmentsJobs", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.CompanyDepartmentPolicies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DerpartmentId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("CompanyDepartmentPolicies", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.CompanyDepartmentPoliciesIsReaded", b =>
                {
                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyDepartmentPoliciesId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("CompanyId", "EmployeeId", "CompanyDepartmentPoliciesId");

                    b.HasIndex("CompanyDepartmentPoliciesId");

                    b.HasIndex("EmployeeId", "CompanyId");

                    b.ToTable("CompanyDepartmentPoliciesIsReaded", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.Department", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Logo")
                        .HasColumnType("text");

                    b.Property<Guid?>("ManagerId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("OfficePhoneNumber")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("CompanyId", "ManagerId");

                    b.HasIndex("Name", "CompanyId")
                        .IsUnique();

                    b.ToTable("Department", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Countries", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nationality")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneCodeNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumberLength")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Countries", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.CountriesStates", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CountriesId")
                        .HasColumnType("integer");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CountriesId");

                    b.ToTable("CountriesStates", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.DocumentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DocumentType", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Gender", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatus", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.RelativeRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("RelativeRelation", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Religion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Religion", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.Certificates", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttachmentPaht")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("IssuingBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("IssuingOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Certificates", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<int>("CountryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("MainCompanyId")
                        .HasColumnType("uuid");

                    b.Property<int?>("MaritalStatusId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NationalIDNumber")
                        .HasColumnType("text");

                    b.Property<int?>("NationalityId")
                        .HasColumnType("integer");

                    b.Property<string>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryPhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("ReligionId")
                        .HasColumnType("integer");

                    b.Property<string>("SaudiVisaNumber")
                        .HasColumnType("text");

                    b.Property<string>("SecondaryPhonenNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SocialInsuranceSubscriptionNumber")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("ReligionId");

                    b.ToTable("Employee", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.EmployeeDocuments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuingOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeDocuments", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.FamilyDocuments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttachmentPath")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("FamilyInformationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("IssuingOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MemeberId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("FamilyInformationId");

                    b.ToTable("FamilyDocuments", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.FamilyInformation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<string>("FamilyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("GenderId")
                        .HasColumnType("integer");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("integer");

                    b.Property<int>("RelativeRelationId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GenderId");

                    b.HasIndex("MaritalStatusId");

                    b.HasIndex("RelativeRelationId");

                    b.ToTable("FamilyInformation", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.WorkHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CompanyLogo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Details")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("EmploymentEndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("EmploymentStartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("JobPosition")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("WorkHistory", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeePositionsAggregate.Models.EmployeePositions", b =>
                {
                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("JobId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("DepartmentId", "JobId", "EmployeeId", "CompanyId");

                    b.HasIndex("CompanyId", "EmployeeId");

                    b.ToTable("EmployeePositions", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.JobAggregate.Models.Job", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("OccupationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("OccupationId");

                    b.ToTable("Job", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.OccupationAggregate.Models.Occupation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Occupation", "Structure");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", null)
                        .WithMany("Companies")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Structure.Domain.Aggregate.CompanyAggregate.LookUp.CompanyStatus", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", "Company")
                        .WithMany("CompaniesEmployeeInformations")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", "Employee")
                        .WithMany("CompaniesEmployeeInformations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.Role", "role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.CompanyEmployeeStatus", "status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Employee");

                    b.Navigation("role");

                    b.Navigation("status");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.EmployeeServiceTermination", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.TerminationReasons", "TerminationReasons")
                        .WithMany()
                        .HasForeignKey("TerminationReasonsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", "CompaniesEmployeeInformations")
                        .WithMany()
                        .HasForeignKey("CompaniesEmployeeInformationsEmployeeId", "CompaniesEmployeeInformationsCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaniesEmployeeInformations");

                    b.Navigation("TerminationReasons");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.InjuryAndDeathRegistration", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Lookup.InjuryTypes", "InjuryTypes")
                        .WithMany()
                        .HasForeignKey("InjuryTypesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", "CompaniesEmployeeInformations")
                        .WithMany("injuryAndDeathRegistrations")
                        .HasForeignKey("CompaniesEmployeeInformationsEmployeeId", "CompaniesEmployeeInformationsCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaniesEmployeeInformations");

                    b.Navigation("InjuryTypes");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentJobsAggregate.Models.DepartmentsJobs", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.Department", "Department")
                        .WithMany("departmentsJobs")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.JobAggregate.Models.Job", "Job")
                        .WithMany("departmentsJobs")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.CompanyDepartmentPolicies", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", "Company")
                        .WithMany("companyDepartmentsPolicy")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.Department", "Department")
                        .WithMany("companyDepartmentsPolicy")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.CompanyDepartmentPoliciesIsReaded", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.CompanyDepartmentPolicies", "CompanyDepartmentPolicies")
                        .WithMany("CompanyDepartmentPoliciesIsReaded")
                        .HasForeignKey("CompanyDepartmentPoliciesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", "CompaniesEmployeeInformations")
                        .WithMany()
                        .HasForeignKey("EmployeeId", "CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaniesEmployeeInformations");

                    b.Navigation("CompanyDepartmentPolicies");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.Department", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", null)
                        .WithMany("departments")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.Department", "department")
                        .WithMany("departments")
                        .HasForeignKey("ParentId");

                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", "EmployeeInformations")
                        .WithMany()
                        .HasForeignKey("CompanyId", "ManagerId");

                    b.Navigation("EmployeeInformations");

                    b.Navigation("department");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.CountriesStates", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Countries", "Countries")
                        .WithMany()
                        .HasForeignKey("CountriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Countries");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.Certificates", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", "Employee")
                        .WithMany("certificates")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Countries", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId");

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Religion", "Religion")
                        .WithMany()
                        .HasForeignKey("ReligionId");

                    b.Navigation("Company");

                    b.Navigation("Country");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("Religion");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.EmployeeDocuments", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", "Employee")
                        .WithMany("employeeDocuments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.FamilyDocuments", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Models.FamilyInformation", "FamilyInformation")
                        .WithMany("familyDocuments")
                        .HasForeignKey("FamilyInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("FamilyInformation");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.FamilyInformation", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", "Employee")
                        .WithMany("familyInformation")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Lookup.RelativeRelation", "RelativeRelation")
                        .WithMany()
                        .HasForeignKey("RelativeRelationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Gender");

                    b.Navigation("MaritalStatus");

                    b.Navigation("RelativeRelation");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.WorkHistory", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", "Employee")
                        .WithMany("workHistories")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeePositionsAggregate.Models.EmployeePositions", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", "CompaniesEmployeeInformations")
                        .WithMany("employeePositions")
                        .HasForeignKey("CompanyId", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Structure.Domain.Aggregate.DepartmentJobsAggregate.Models.DepartmentsJobs", "DepartmentsJobs")
                        .WithMany("employeePositions")
                        .HasForeignKey("DepartmentId", "JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CompaniesEmployeeInformations");

                    b.Navigation("DepartmentsJobs");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.JobAggregate.Models.Job", b =>
                {
                    b.HasOne("Structure.Domain.Aggregate.OccupationAggregate.Models.Occupation", "occupation")
                        .WithMany("Job")
                        .HasForeignKey("OccupationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("occupation");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyAggregate.Models.Company", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("CompaniesEmployeeInformations");

                    b.Navigation("companyDepartmentsPolicy");

                    b.Navigation("departments");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.CompanyEmployeeInfromationAggregate.Models.CompaniesEmployeeInformations", b =>
                {
                    b.Navigation("employeePositions");

                    b.Navigation("injuryAndDeathRegistrations");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentJobsAggregate.Models.DepartmentsJobs", b =>
                {
                    b.Navigation("employeePositions");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.CompanyDepartmentPolicies", b =>
                {
                    b.Navigation("CompanyDepartmentPoliciesIsReaded");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.DepartmentsaAggregate.Models.Department", b =>
                {
                    b.Navigation("companyDepartmentsPolicy");

                    b.Navigation("departments");

                    b.Navigation("departmentsJobs");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.Employee", b =>
                {
                    b.Navigation("CompaniesEmployeeInformations");

                    b.Navigation("certificates");

                    b.Navigation("employeeDocuments");

                    b.Navigation("familyInformation");

                    b.Navigation("workHistories");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.EmployeeAggregate.Models.FamilyInformation", b =>
                {
                    b.Navigation("familyDocuments");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.JobAggregate.Models.Job", b =>
                {
                    b.Navigation("departmentsJobs");
                });

            modelBuilder.Entity("Structure.Domain.Aggregate.OccupationAggregate.Models.Occupation", b =>
                {
                    b.Navigation("Job");
                });
#pragma warning restore 612, 618
        }
    }
}
